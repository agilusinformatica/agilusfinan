@model IEnumerable<AgilusFinan.Domain.Entities.Titulo>

<table class="table" id="sorted">
    <thead>
        <tr>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.DataVencimento)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Descricao)
            </th>
            <th>
                Categoria
            </th>
            <th>
                Conta
            </th>
            <th>
                Pessoa
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Valor)
            </th>
            <th>
                Pago?
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>

                <td>
                    @if (item.Id == 0)
                    {
                        <span class="label label-danger">R</span>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DataVencimento.GetDateTimeFormats()[0])
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Descricao)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Categoria.Nome)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Conta.Nome)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Pessoa.Nome)
                </td>
                <td align="right">
                    @if (item.Valor != 0)
                    {
                        @item.Valor.ToString("#,##0.00")
                    }
                </td>
                <td>
                    @if (item.Liquidado == "Pago")
                    {
                        <span class="label label-success">@Html.DisplayFor(modelItem => item.Liquidado)</span>
                    }
                    @if (item.Liquidado == "Parcialmente")
                    {
                        <span class="label label-warning">@Html.DisplayFor(modelItem => item.Liquidado)</span>
                    }
                    @if (item.Liquidado == "Não Pago" && item.DataVencimento <= DateTime.Today)
                    {
                        <span class="label label-danger">@Html.DisplayFor(modelItem => item.Liquidado)</span>
                    }
                    @if (item.Liquidado == "Não Pago" && item.DataVencimento > DateTime.Today)
                    {
                        <span class="label label-primary">@Html.DisplayFor(modelItem => item.Liquidado)</span>
                    }
                </td>
                <td style="width: auto">
                    <div class="btn-group" role="group">
                        @if (item.Id != 0)
                        {
                            @Html.ActionLink(" ", "Edit", new { id = item.Id }, new { @class = "btn btn-primary btn-circle fa fa-edit", @title = "Alterar" })
                            <button class="btn btn-warning btn-circle" title="Excluir" onclick="Excluir((@item.Id), this)"><i class="dim fa fa-trash-o"></i></button>
                            @Html.ActionLink(" ", "Duplicar", new { id = item.Id }, new { @class = "btn btn-primary btn-circle fa fa-share-alt", @title = "Duplicar" })
                        }


                        @*@if (item.Liquidado != "Pago" && item.Liquidado != "Parcialmente")
                        {
                            if (item.Id != 0)
                            {
                                @Html.ActionLink(" ", "LiquidarDiretamente", new { id = item.Id }, new { @class = "btn btn-primary btn-circle fa fa-money", @title = "Liquidar Diretamente" })
                            }
                            else
                            {
                                @Html.ActionLink(" ", "../TituloPendente/LiquidarDiretamente", new { dataVencimento = item.DataVencimento, tituloRecorrenteId = item.TituloRecorrenteId }, new { @class = "btn btn-primary btn-circle fa fa-money", @title = "Liquidar Diretamente" })
                            }
                        }*@

                        @if (item.Liquidado != "Pago")
                        {
                            if (item.Id != 0)
                            {
                                @Html.ActionLink(" ", "Liquidar", new { id = item.Id }, new { @class = "btn btn-success btn-circle fa fa-money modal-link", @title = "Liquidar", data_executar = "excluirTituloLiquidado()" })
                            }
                            else
                            {
                                @Html.ActionLink(" ", "../TituloPendente/Liquidar", new { dataVencimento = item.DataVencimento, tituloRecorrenteId = item.TituloRecorrenteId }, new { @class = "btn btn-success btn-circle fa fa-money modal-link", @title = "Liquidar", data_executar = "excluirTituloLiquidado()" })
                            }
                        }
                        @if (ViewBag.TipoTitulo == "Recebimento" && item.Liquidado != "Pago")
                        {
                            <div class="btn-group">
                                @{ var modelos = ((List<AgilusFinan.Domain.Entities.ModeloBoleto>)ViewBag.ModelosBoleto).Where(c => c.ContaId == item.ContaId); }
                                @if (modelos.Count() == 1)
                                {
                                    if (item.Id != 0)
                                    {
                                        @Html.ActionLink(" ", "GerarBoleto", new { tituloId = item.Id, ModeloBoletoId = modelos.First().Id }, new { @class = "btn btn-primary btn-circle fa fa-barcode" })
                                    }
                                    else
                                    {
                                        @Html.ActionLink(" ", "../TituloPendente/GerarBoleto", new { TituloRecorrenteId = item.TituloRecorrenteId, Valor = item.Valor.ToString("#,##0.00"), dataVencimento = item.DataVencimento, modeloBoletoId = modelos.First().Id }, new { @class = "btn btn-primary btn-circle fa fa-barcode" })
                                    }
                                }
                                else
                                {
                                    <a href="#" class="dropdown-toggle btn btn-primary btn-circle fa fa-barcode" data-toggle="dropdown"></a>
                                    <ul class="dropdown-menu">
                                        @foreach (var modelo in modelos)
                                        {
                                            if (item.Id != 0)
                                            {
                                                <li>@Html.ActionLink((string)modelo.Nome, "GerarBoleto", new { tituloId = item.Id, ModeloBoletoId = modelo.Id })</li>
                                            }
                                            else
                                            {
                                                <li>@Html.ActionLink((string)modelo.Nome, "../TituloPendente/GerarBoleto", new { TituloRecorrenteId = item.TituloRecorrenteId, valor = item.Valor.ToString("#,##0.00"), dataVencimento = item.DataVencimento, modeloBoletoId = modelos.First().Id })</li>
                                            }
                                        }
                                    </ul>
                                }
                            </div>
                        }
                    </div>

                </td>
            </tr>
        }
    </tbody>
</table>


<script>
    Utils.initializeDataTables('#sorted');

    function Excluir(id, element) {
        var controller = "@((string)Html.ViewContext.RouteData.Values["controller"])";
        swal({
            title: "Excluir ",
            text: "Tem certeza que deseja excluir?",
            type: "warning",
            showCancelButton: true,
            showLoaderOnConfirm: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Sim, excluir!",
            cancelButtonText: "Não, cancelar!",
            closeOnConfirm: false,
            closeOnCancel: false
        },
        function (isConfirm) {
            if (isConfirm) {
                $.ajax({
                    method: "POST",
                    url: '/' + controller + '/Delete',
                    data: { "Id": id },
                    success: function () {
                        swal("Excluido!", "O registro foi excluido com sucesso.", "success");
                        var tr = $(element).parent().parent().parent();
                        tr.fadeOut("2000", function () {
                            tr.remove();
                        });
                    },
                    error: function () {
                        swal("Erro", "Este registro possui dependências", "error");
                    }
                });
            } else {
                swal("Cancelado", "O registro não foi excluido :)", "error");
            }
        });
    };

    var excluirTituloLiquidado = function () {
        var tr = linkClicado.parent().parent().parent();
        tr.children()[7].innerHTML = '<label class="label label-success">Pago</label>';
        tr.children()[0].innerHTML = "";
    }
</script>
