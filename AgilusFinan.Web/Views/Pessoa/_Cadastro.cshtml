<link rel="stylesheet" type="text/css" href="../../Content/HelloTable.css" />

@model AgilusFinan.Web.ViewModels.PessoaViewModel

@using (Html.BeginForm("Create", "Pessoa", FormMethod.Post, new { id = "formPessoa"}))
{
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />

        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.TiposPorPessoa, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ListaTiposPessoa", null, htmlAttributes: new { @class = "form-control select2-responsive", @multiple = "multiple", @id = "listaTiposPessoa" })
                @Html.ValidationMessageFor(model => model.TiposPorPessoa, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cpf, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cpf, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cpf, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Rg, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rg, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rg, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailContato, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmailContato, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmailContato, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailFinanceiro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmailFinanceiro, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmailFinanceiro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataNascimento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12">
                @Html.EditorFor(model => model.Endereco, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-12">
                @Html.EditorFor(model => model.ContaBancaria, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContaBancaria, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Telefones</label>
            <div id="divTable" class="col-md-10">
                <button class="btn btn-primary" id="AdicionarTelefone" type="button" ><i class="fa fa-plus"></i> Adicionar</button>
                <table class="" id="tabTelefones"></table>
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <span class="btn btn-primary" onclick="UpdatePessoa();"><i class="fa fa-check"></i> Gravar</span>
                @if (ViewBag.TipoOperacao == "Incluindo")
                {
                    <span class="btn btn-primary" onclick="UpdatePessoa(true);">Gravar e incluir uma nova</span>
                }
                @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-warning" })
            </div>
        </div>

    </div>
}

<style>
    .select2-selection {
        height: 100% !important;
    }
</style>

<script src="~/Scripts/HelloTable.js"></script>

<script>
    //// Validação
    $(document).ready(function () {
        var form = $('#formPessoa')
            , formData = $.data(form[0])
            , settings = formData.validator.settings
            // Store existing event handlers in local variables
            , oldErrorPlacement = settings.errorPlacement
            , oldSuccess = settings.success;

        settings.errorPlacement = function (label, element) {

            // Call old handler so it can update the HTML
            oldErrorPlacement(label, element);

            // Add Bootstrap classes to newly added elements
            label.parents('.form-group').addClass('has-error');
            label.addClass('text-danger');
        };

        settings.success = function (label) {
            // Remove error class from <div class="form-group">, but don't worry about
            // validation error messages as the plugin is going to remove it anyway
            label.parents('.form-group').removeClass('has-error');

            // Call old handler to do rest of the work
            oldSuccess(label);
        };
    });

    $('#listaTiposPessoa').select2({ width: '100%' });

    // montagem da tabela de telefones
    var tabTelefones = new HelloTable('tabTelefones', 'AdicionarTelefone');
    var tipos = JSON.parse('@Html.Raw(Json.Encode(ViewBag.ListaTiposTelefone))');
    var elementos = [];
    for (var i = 0; i < tipos.length; i++) {
        elementos.push(new SelectElement(tipos[i].Id, tipos[i].Nome));
    }
    tabTelefones.Columns.push(new ColumnTable('DDD', 'Ddd', ColumnType.text, null, '00', null));
    tabTelefones.Columns.push(new ColumnTable('Número', 'Numero', ColumnType.text, null, 'telefone', null));
    tabTelefones.Columns.push(new ColumnTable('Tipo', 'TipoTelefoneId', ColumnType.list, elementos, null, null));
    tabTelefones.Columns.push(new ColumnTable('Id', 'Id', ColumnType.hidden));

    tabTelefones.jsonData = '@Html.Raw(Json.Encode(Model.Telefones))';

    function UpdatePessoa(manterTela) {
        var pessoaJson = GetData();
        if ($('#formPessoa').valid()) {
            $.ajax({
                type: "POST",
                url: '/Pessoa/@(ViewBag.TipoOperacao == "Incluindo" ? "Create" : "Edit")',
                data: { "postedData": pessoaJson },
                success: function () {
                    if (manterTela) {
                        window.location = '@Url.Action("Create", "Pessoa")';
                    }
                    else {
                        window.location = '@Url.Action("Index", "Pessoa")';
                    }
                },
                error: function (object) {

                    //Capturando erro no objeto htmlResponse
                    var htmlResponse = document.createElement('html');
                    htmlResponse.innerHTML = object.responseText;
                    var erro = htmlResponse.querySelector('h4').textContent;

                    location.href = '@Url.Action("Erro", "Pessoa")?erro=' + erro
                }
            });
        }
        
    }

    function GetData() {
        var pessoa = {};

        pessoa.Telefones = [{}];
        pessoa.Id = $('#Id').val();
        pessoa.Nome = $('#Nome').val();
        pessoa.Cpf = $('#Cpf').cleanVal(); //cleanVal() - valor sem a máscara
        pessoa.Rg = $('#Rg').val();
        pessoa.DataNascimento = Utils.convertFormatDate($('#DataNascimento').val()); //Converte formato de data.
        pessoa.EmailContato = $('#EmailContato').val();
        pessoa.EmailFinanceiro = $('#EmailFinanceiro').val();

        pessoa.Endereco = {};
        pessoa.Endereco.Logradouro = $('#Endereco_Logradouro').val();
        pessoa.Endereco.Numero = $('#Endereco_Numero').val();
        pessoa.Endereco.Complemento = $('#Endereco_Complemento').val();
        pessoa.Endereco.Bairro = $('#Endereco_Bairro').val();
        pessoa.Endereco.Cidade = $('#Endereco_Cidade').val();
        pessoa.Endereco.Uf = $('#Endereco_Uf').val();
        pessoa.Endereco.Cep = $('#Endereco_Cep').cleanVal();

        pessoa.ContaBancaria = {};
        pessoa.ContaBancaria.BancoId = $('#ContaBancaria_BancoId').val();
        pessoa.ContaBancaria.Agencia = $('#ContaBancaria_Agencia').val();
        pessoa.ContaBancaria.Numero = $('#ContaBancaria_Numero').val();
        pessoa.ContaBancaria.Poupanca = document.getElementById('ContaBancaria_Poupanca').checked;
        pessoa.ContaBancaria.NomeTitular = $('#ContaBancaria_NomeTitular').val();
        pessoa.ContaBancaria.CpfTitular = $('#ContaBancaria_CpfTitular').cleanVal();

        pessoa.TiposPorPessoa = [{}];

        var selectTiposPessoa = $('#listaTiposPessoa').val();

        for (var i = 0; i < selectTiposPessoa.length; i++) {
            var TipoPorPessoa = {};
            TipoPorPessoa = selectTiposPessoa[i];
            pessoa.TiposPorPessoa[i] = TipoPorPessoa;
        }

        var telefones = [];

        Array.from(tabTelefones.data).forEach(function (t) {
            if (t.Id === '') {
                t.Id = 0;
            }
            t.Numero = t.Numero.replace('-', '');
            telefones.push(t);
        });

        pessoa.Telefones = telefones;

        return JSON.stringify(pessoa);
    }

    var mascarasPessoas = (function () {
        Utils.createMask(document.getElementById("Cpf"), "cpf");
        Utils.createMask(document.getElementById("ContaBancaria_CpfTitular"), "cpf");
    })();

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
