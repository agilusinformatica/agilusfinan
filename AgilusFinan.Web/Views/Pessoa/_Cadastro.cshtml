<link rel="stylesheet" type="text/css" href="../../Content/HelloTable.css" />


@model AgilusFinan.Web.ViewModels.PessoaViewModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Pessoa</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new
           {
               htmlAttributes = new
               {
                   @class = "form-control"
               }
           })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cpf, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cpf, new
                {
                    htmlAttributes = new
                    {
                        @class = "form-control"

                    }
                })
                @Html.ValidationMessageFor(model => model.Cpf, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Rg, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rg, new
                {
                    htmlAttributes = new { @class = "form-control" }
                })
                @Html.ValidationMessageFor(model => model.Rg, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailContato, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <span class="input-group-addon" id="basic-addon1">@</span>
                @Html.EditorFor(model => model.EmailContato, new
                {
                    htmlAttributes = new { @class = "form-control" }
                })
                @Html.ValidationMessageFor(model => model.EmailContato, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailFinanceiro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <span class="input-group-addon" id="basic-addon1">@</span>
                @Html.EditorFor(model => model.EmailFinanceiro, new
                {
                    htmlAttributes = new { @class = "form-control" }
                })
                @Html.ValidationMessageFor(model => model.EmailFinanceiro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataNascimento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Endereco, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContaBancaria, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContaBancaria, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TiposPorPessoa, htmlAttributes: new { @class = "control-label col-md-2" })
            <table id="tabTiposPessoa">
                <tr>
                    @foreach (var tipo in Model.TiposPorPessoa)
                    {
                        <td>
                            @Html.LabelFor(model => model.TiposPorPessoa, tipo.Nome, htmlAttributes: new { @class = "control-label col-md-1" })
                            <input type="hidden" value="@(tipo.Id)" />
                            <input class="form-control" type="checkbox" @(tipo.Marcado ? "checked" : "") />
                        </td>
                    }
                </tr>
            </table>
        </div>

        <div id="divTable">
            <input class="btn btn-default" id="AdicionarTelefone" type="button" value="Adiciona Telefone" />
            <table class="" id="tabTelefones"></table>
            <span class="btn btn-default" onclick="UpdatePessoa();">Gravar</span>
            <span class="btn btn-default" onclick="UpdatePessoa(true);">Gravar e incluir uma nova</span>
        </div>

    </div>
}



<div>
    @Html.ActionLink("Voltar sem gravar", "Index")
</div>

<script src="~/Scripts/HelloTable.js"></script>

<script>
    // Validação

    $(document).ready(function () {

        var settings = $.data($('form')[0], 'validator').settings;

        $("form").bind("invalid-form.validate", function (form, validator) {
            var errors = validator.numberOfInvalids();
            var message = "Please fix" + errors + " errors.";

            for (var x = 0; x < validator.errorList.length; x++) {
                message += "<br/>\u25CF " + validator.errorList[x].message;
            }
            $("#errorList").html(message);
            $("#errorList").slideDown('fast');

        });

        settings.rules = {
            Cpf: {
                required: true
            },
            Nome: {
                required: true,
                minlength: 10
            },
            DataNascimento: {
                required: true
            }
        }

        settings.messages = {
            CPf: "Campo CPF é obrigatório",
            Nome: {
                required: "Campo nome é obrigatório.",
                minlength: "Campo deve conter ao menos 10 caracteres."
            }
        }

        settings.submitHandler = function (form) {
            UpdatePessoa();
        };

    });


    // montagem da tabela de telefones
    var tabTelefones = new HelloTable('tabTelefones', 'AdicionarTelefone');
    var tipos = JSON.parse('@Html.Raw(Json.Encode(ViewBag.ListaTiposTelefone))');
    var elementos = [];
    for (var i = 0; i < tipos.length; i++) {
        elementos.push(new SelectElement(tipos[i].Id, tipos[i].Nome));
    }
    tabTelefones.Columns.push(new ColumnTable('DDD', 'Ddd', ColumnType.text, null, '00', null));
    tabTelefones.Columns.push(new ColumnTable('Número', 'Numero', ColumnType.text, null, 'telefone', null));
    tabTelefones.Columns.push(new ColumnTable('Tipo', 'TipoTelefoneId', ColumnType.list, elementos, null, null));
    tabTelefones.Columns.push(new ColumnTable('Id', 'Id', ColumnType.hidden));

    tabTelefones.jsonData = '@Html.Raw(Json.Encode(Model.Telefones))';

    function UpdatePessoa(manterTela) {
        var pessoaJson = GetData();
        $.ajax({
            type: "POST",
            url: '/Pessoa/@(ViewBag.TipoOperacao == "Incluindo" ? "Create" : "Edit")',
            data: { "postedData": pessoaJson },
            success: function () {
                if (manterTela) {
                    window.location = '@Url.Action("Create", "Pessoa")';
                }
                else {
                    window.location = '@Url.Action("Index", "Pessoa")';
            }
            },
            error: function (object) {

                //Capturando erro no objeto htmlResponse
                var htmlResponse = document.createElement('html');
                htmlResponse.innerHTML = object.responseText;
                var erro = htmlResponse.querySelector('h4').textContent;

                location.href = '@Url.Action("Erro", "Pessoa")?erro=' + erro
            }
        });
    }

    function GetData() {
        var pessoa = {};

        pessoa.Telefones = [{}];
        pessoa.Id = $('#Id').val();
        pessoa.Nome = $('#Nome').val();
        pessoa.Cpf = $('#Cpf').cleanVal(); //cleanVal() - valor sem a máscara
        pessoa.Rg = $('#Rg').cleanVal();
        pessoa.DataNascimento = Utils.convertFormatDate($('#DataNascimento').val()); //Converte formato de data.
        pessoa.EmailContato = $('#EmailContato').val();
        pessoa.EmailFinanceiro = $('#EmailFinanceiro').val();

        pessoa.Endereco = {};
        pessoa.Endereco.Logradouro = $('#Endereco_Logradouro').val();
        pessoa.Endereco.Numero = $('#Endereco_Numero').val();
        pessoa.Endereco.Complemento = $('#Endereco_Complemento').val();
        pessoa.Endereco.Bairro = $('#Endereco_Bairro').val();
        pessoa.Endereco.Cidade = $('#Endereco_Cidade').val();
        pessoa.Endereco.Uf = $('#Endereco_Uf').val();
        pessoa.Endereco.Cep = $('#Endereco_Cep').cleanVal();

        pessoa.ContaBancaria = {};
        pessoa.ContaBancaria.BancoId = $('#ContaBancaria_BancoId').val();
        pessoa.ContaBancaria.Agencia = $('#ContaBancaria_Agencia').val();
        pessoa.ContaBancaria.Numero = $('#ContaBancaria_Numero').val();
        pessoa.ContaBancaria.Poupanca = document.getElementById('ContaBancaria_Poupanca').checked;
        pessoa.ContaBancaria.NomeTitular = $('#ContaBancaria_NomeTitular').val();
        pessoa.ContaBancaria.CpfTitular = $('#ContaBancaria_CpfTitular').cleanVal();

        pessoa.TiposPorPessoa = [{}];

        var tab = document.getElementById('tabTiposPessoa');
        for (var i = 0, cell; cell = tab.rows[0].cells[i]; i++) {
            var TipoPorPessoa = {};
            TipoPorPessoa.Id = cell.getElementsByTagName('input')[0].value;
            TipoPorPessoa.Marcado = cell.getElementsByTagName('input')[1].checked;
            pessoa.TiposPorPessoa[i] = TipoPorPessoa;
        }

        var telefones = [];

        Array.from(tabTelefones.data).forEach(function (t) {
            if (t.Id === '') {
                t.Id = 0;
            }
            t.Numero = t.Numero.replace('-', '');
            telefones.push(t);
        });

        pessoa.Telefones = telefones;

        return JSON.stringify(pessoa);
    }

    var mascarasPessoas = (function () {
        Utils.createMask(document.getElementById("Cpf"), "cpf");
        Utils.createMask(document.getElementById("ContaBancaria_CpfTitular"), "cpf");
        Utils.createMask(document.getElementById("Rg"), "rg");
    })();

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
