@model System.Collections.Generic.List<AgilusFinan.Domain.Entities.TituloPendente>

<table class="table table-hover" id="titulosAVincularLista">
    <thead>
        <tr>
            <th></th>
            <th>Titulo ID</th>
            <th>Titulo Recorrente ID</th>
            <th>Descrição</th>
            <th>Valor</th>
            <th>Direção</th>
            <th>Categoria ID</th>
            <th>Data Vencimento</th>
            <th>Pessoa ID</th>
            <th>Conta ID</th>
            <th>RowIndex</th>

        </tr>
    </thead>

    <tbody>
        @{
            var rowIndex = 0;
        }
        @foreach (var titulo in Model)
        {
            <tr data-rowindex=@rowIndex>

                <td><input class="input-sm" type="checkbox" name="vinculoCheckbox" /></td>
                <td name="TituloId">@titulo.TituloId</td>
                <td name="TituloRecorrenteId">@titulo.TituloRecorrenteId</td>
                <td name="Descricao">@titulo.Descricao</td>

                @*<td>@titulo.Valor</td>*@

                @if (titulo.Valor == null)
                {
                    <td> <input class="form-control" type="text" name="Valor" disabled="disabled" value="0,00" /> </td>
                }
                else
                {
                    <td name="Valor">@(((decimal)titulo.Valor).ToString("C"))</td>
                }

                <td name="Direcao">@titulo.Direcao</td>
                <td name="CategoriaId">@titulo.NomeCategoria</td>
                <td name="DataVencimento">@titulo.DataVencimento.Date.ToShortDateString()</td>
                <td name="PessoaId">@titulo.NomePessoa</td>
                <td name="ContaId">@titulo.NomeConta</td>
                <td name="rowIndex">@rowIndex</td>
            </tr>
            {
                rowIndex = rowIndex + 1;
            }
        }
    </tbody>
</table>
<input class="btn btn-default modal" value="Vincular" />

<style>


</style>

<script>

    var TitulosPendentes = function () {
        var titulosPendentes = @(Html.Raw(Json.Encode(Model)));

        if ($.fn.DataTable.isDataTable('#titulosAVincularLista')) {
            $('#titulosAVincularLista').DataTable().destroy();
        }

        Utils.initializeDataTables('#titulosAVincularLista');

        var initEvents = function() {
            Utils.createMaskClass(document.querySelectorAll('#titulosAVincularLista input[name=Valor]'), 'moeda');
            console.log($('#titulosAVincularLista input[name=Valor]'));
        };

        var oTable = $('#titulosAVincularLista').dataTable();
	
        oTable.fnSetColumnVis(1, false);
        oTable.fnSetColumnVis(2, false);
        oTable.fnSetColumnVis(10, false);

        var getTituloSelecionado = function (index) {
            //Conversão do formato da data antes do retorno.
            var regex = new RegExp(/\/Date\(\d{13}\)\//); //Regex que verifica se data esta no formato /Date(1450231200000)/
            if (regex.exec(titulosPendentes[index].DataVencimento)) {
                titulosPendentes[index].DataVencimento = Utils.convertJSONDate(titulosPendentes[index].DataVencimento, 'DMY');
            }

            return titulosPendentes[index];
        };

        var getData = function () {
            return JSON.parse('@Html.Raw(Json.Encode(Model))');
        }

        return {
            titulosPendentes: titulosPendentes,
            initEvents: initEvents,
            getTituloSelecionado: getTituloSelecionado
        }

    }();


</script>